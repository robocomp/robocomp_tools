// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RCMaster.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ____RCMaster_h__
#define ____RCMaster_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace RoboCompRCMaster
{

class rcmaster;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRCMaster::rcmaster>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompRCMaster::rcmaster*);

}

}

namespace RoboCompRCMaster
{

class rcmaster;
bool operator==(const rcmaster&, const rcmaster&);
bool operator<(const rcmaster&, const rcmaster&);
::Ice::Object* upCast(::RoboCompRCMaster::rcmaster*);
typedef ::IceInternal::Handle< ::RoboCompRCMaster::rcmaster> rcmasterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRCMaster::rcmaster> rcmasterPrx;
void __patch(rcmasterPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompRCMaster
{

struct hostInfo
{
    hostInfo() :
        hostName("localhost")
    {
    }
    
    hostInfo(const ::std::string& __ice_publicIP, const ::std::string& __ice_privateIP, const ::std::string& __ice_hostName) :
        publicIP(__ice_publicIP),
        privateIP(__ice_privateIP),
        hostName(__ice_hostName)
    {
    }
    

    ::std::string publicIP;
    ::std::string privateIP;
    ::std::string hostName;

    bool operator==(const hostInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(publicIP != __rhs.publicIP)
        {
            return false;
        }
        if(privateIP != __rhs.privateIP)
        {
            return false;
        }
        if(hostName != __rhs.hostName)
        {
            return false;
        }
        return true;
    }

    bool operator<(const hostInfo& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(publicIP < __rhs.publicIP)
        {
            return true;
        }
        else if(__rhs.publicIP < publicIP)
        {
            return false;
        }
        if(privateIP < __rhs.privateIP)
        {
            return true;
        }
        else if(__rhs.privateIP < privateIP)
        {
            return false;
        }
        if(hostName < __rhs.hostName)
        {
            return true;
        }
        else if(__rhs.hostName < hostName)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const hostInfo& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const hostInfo& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const hostInfo& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const hostInfo& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct interfaceData
{
    interfaceData() :
        port(0),
        protocol("tcp")
    {
    }
    
    interfaceData(const ::std::string& __ice_name, ::Ice::Int __ice_port, const ::std::string& __ice_protocol) :
        name(__ice_name),
        port(__ice_port),
        protocol(__ice_protocol)
    {
    }
    

    ::std::string name;
    ::Ice::Int port;
    ::std::string protocol;

    bool operator==(const interfaceData& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(name != __rhs.name)
        {
            return false;
        }
        if(port != __rhs.port)
        {
            return false;
        }
        if(protocol != __rhs.protocol)
        {
            return false;
        }
        return true;
    }

    bool operator<(const interfaceData& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(name < __rhs.name)
        {
            return true;
        }
        else if(__rhs.name < name)
        {
            return false;
        }
        if(port < __rhs.port)
        {
            return true;
        }
        else if(__rhs.port < port)
        {
            return false;
        }
        if(protocol < __rhs.protocol)
        {
            return true;
        }
        else if(__rhs.protocol < protocol)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const interfaceData& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const interfaceData& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const interfaceData& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const interfaceData& __rhs) const
    {
        return !operator<(__rhs);
    }
};

typedef ::std::vector< ::RoboCompRCMaster::interfaceData> interfaceList;

enum CompStatus
{
    Active,
    Stopped
};

struct compData
{
    compData() :
        status(Active)
    {
    }
    
    compData(const ::std::string& __ice_uid, const ::std::string& __ice_name, ::RoboCompRCMaster::CompStatus __ice_status, const ::RoboCompRCMaster::hostInfo& __ice_host, const ::RoboCompRCMaster::interfaceList& __ice_interfaces) :
        uid(__ice_uid),
        name(__ice_name),
        status(__ice_status),
        host(__ice_host),
        interfaces(__ice_interfaces)
    {
    }
    

    ::std::string uid;
    ::std::string name;
    ::RoboCompRCMaster::CompStatus status;
    ::RoboCompRCMaster::hostInfo host;
    ::RoboCompRCMaster::interfaceList interfaces;
};

typedef ::std::map< ::std::string, ::RoboCompRCMaster::compData> compDB;

typedef ::std::map< ::std::string, ::Ice::Int> cacheDb;

class InvalidComponent : public ::Ice::UserException
{
public:

    InvalidComponent() {}
    InvalidComponent(const ::RoboCompRCMaster::compData&, const ::std::string&);
    virtual ~InvalidComponent() throw();

    virtual ::std::string ice_name() const;
    virtual InvalidComponent* ice_clone() const;
    virtual void ice_throw() const;

    ::RoboCompRCMaster::compData component;
    ::std::string message;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static InvalidComponent __InvalidComponent_init;

class DuplicateComponent : public ::Ice::UserException
{
public:

    DuplicateComponent() {}
    explicit DuplicateComponent(const ::RoboCompRCMaster::compData&);
    virtual ~DuplicateComponent() throw();

    virtual ::std::string ice_name() const;
    virtual DuplicateComponent* ice_clone() const;
    virtual void ice_throw() const;

    ::RoboCompRCMaster::compData component;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class ComponentNotFound : public ::Ice::UserException
{
public:

    ComponentNotFound() {}
    explicit ComponentNotFound(const ::RoboCompRCMaster::compData&);
    virtual ~ComponentNotFound() throw();

    virtual ::std::string ice_name() const;
    virtual ComponentNotFound* ice_clone() const;
    virtual void ice_throw() const;

    ::RoboCompRCMaster::compData component;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class PortAssignError : public ::Ice::UserException
{
public:

    PortAssignError() {}
    PortAssignError(::Ice::Int, const ::std::string&);
    virtual ~PortAssignError() throw();

    virtual ::std::string ice_name() const;
    virtual PortAssignError* ice_clone() const;
    virtual void ice_throw() const;

    ::Ice::Int port;
    ::std::string errorMessage;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::RoboCompRCMaster::hostInfo>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 3;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompRCMaster::hostInfo, S>
{
    static void write(S* __os, const ::RoboCompRCMaster::hostInfo& v)
    {
        __os->write(v.publicIP);
        __os->write(v.privateIP);
        __os->write(v.hostName);
    }
};

template<class S>
struct StreamReader< ::RoboCompRCMaster::hostInfo, S>
{
    static void read(S* __is, ::RoboCompRCMaster::hostInfo& v)
    {
        __is->read(v.publicIP);
        __is->read(v.privateIP);
        __is->read(v.hostName);
    }
};

template<>
struct StreamableTraits< ::RoboCompRCMaster::interfaceData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 6;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompRCMaster::interfaceData, S>
{
    static void write(S* __os, const ::RoboCompRCMaster::interfaceData& v)
    {
        __os->write(v.name);
        __os->write(v.port);
        __os->write(v.protocol);
    }
};

template<class S>
struct StreamReader< ::RoboCompRCMaster::interfaceData, S>
{
    static void read(S* __is, ::RoboCompRCMaster::interfaceData& v)
    {
        __is->read(v.name);
        __is->read(v.port);
        __is->read(v.protocol);
    }
};

template<>
struct StreamableTraits< ::RoboCompRCMaster::CompStatus>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 1;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

template<>
struct StreamableTraits< ::RoboCompRCMaster::compData>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 7;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::RoboCompRCMaster::compData, S>
{
    static void write(S* __os, const ::RoboCompRCMaster::compData& v)
    {
        __os->write(v.uid);
        __os->write(v.name);
        __os->write(v.status);
        __os->write(v.host);
        __os->write(v.interfaces);
    }
};

template<class S>
struct StreamReader< ::RoboCompRCMaster::compData, S>
{
    static void read(S* __is, ::RoboCompRCMaster::compData& v)
    {
        __is->read(v.uid);
        __is->read(v.name);
        __is->read(v.status);
        __is->read(v.host);
        __is->read(v.interfaces);
    }
};

template<>
struct StreamableTraits< ::RoboCompRCMaster::InvalidComponent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompRCMaster::DuplicateComponent>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompRCMaster::ComponentNotFound>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::RoboCompRCMaster::PortAssignError>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace RoboCompRCMaster
{

class Callback_rcmaster_registerComp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_rcmaster_registerComp_Base> Callback_rcmaster_registerCompPtr;

class Callback_rcmaster_updateDb_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_rcmaster_updateDb_Base> Callback_rcmaster_updateDbPtr;

class Callback_rcmaster_getComps_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_rcmaster_getComps_Base> Callback_rcmaster_getCompsPtr;

class Callback_rcmaster_getComPort_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_rcmaster_getComPort_Base> Callback_rcmaster_getComPortPtr;

class Callback_rcmaster_getComp_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_rcmaster_getComp_Base> Callback_rcmaster_getCompPtr;

class Callback_rcmaster_flush_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_rcmaster_flush_Base> Callback_rcmaster_flushPtr;

class Callback_rcmaster_getStat_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_rcmaster_getStat_Base> Callback_rcmaster_getStatPtr;

}

namespace IceProxy
{

namespace RoboCompRCMaster
{

class rcmaster : virtual public ::IceProxy::Ice::Object
{
public:

    void registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, ::RoboCompRCMaster::interfaceList& idata)
    {
        registerComp(compInfo, monitor, assignPort, idata, 0);
    }
    void registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, ::RoboCompRCMaster::interfaceList& idata, const ::Ice::Context& __ctx)
    {
        registerComp(compInfo, monitor, assignPort, idata, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::IceInternal::Function<void (const ::RoboCompRCMaster::interfaceList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerComp(compInfo, monitor, assignPort, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerComp(compInfo, monitor, assignPort, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRCMaster::interfaceList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerComp(compInfo, monitor, assignPort, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerComp(compInfo, monitor, assignPort, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRCMaster::interfaceList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompRCMaster::interfaceList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
                ::RoboCompRCMaster::interfaceList idata;
                try
                {
                    __proxy->end_registerComp(idata, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(idata);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompRCMaster::interfaceList&)> _response;
        };
        return begin_registerComp(compInfo, monitor, assignPort, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort)
    {
        return begin_registerComp(compInfo, monitor, assignPort, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::Ice::Context& __ctx)
    {
        return begin_registerComp(compInfo, monitor, assignPort, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerComp(compInfo, monitor, assignPort, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerComp(compInfo, monitor, assignPort, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::RoboCompRCMaster::Callback_rcmaster_registerCompPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerComp(compInfo, monitor, assignPort, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::Ice::Context& __ctx, const ::RoboCompRCMaster::Callback_rcmaster_registerCompPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerComp(compInfo, monitor, assignPort, &__ctx, __del, __cookie);
    }

    void end_registerComp(::RoboCompRCMaster::interfaceList& idata, const ::Ice::AsyncResultPtr&);
    
private:

    void registerComp(const ::RoboCompRCMaster::compData&, bool, bool, ::RoboCompRCMaster::interfaceList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerComp(const ::RoboCompRCMaster::compData&, bool, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void updateDb(const ::RoboCompRCMaster::compDB& components)
    {
        updateDb(components, 0);
    }
    void updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context& __ctx)
    {
        updateDb(components, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateDb(components, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateDb(components, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_updateDb(components, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_updateDb(components, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_updateDb(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_updateDb(components, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_updateDb(const ::RoboCompRCMaster::compDB& components)
    {
        return begin_updateDb(components, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context& __ctx)
    {
        return begin_updateDb(components, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDb(components, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDb(components, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::RoboCompRCMaster::Callback_rcmaster_updateDbPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDb(components, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context& __ctx, const ::RoboCompRCMaster::Callback_rcmaster_updateDbPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_updateDb(components, &__ctx, __del, __cookie);
    }

    void end_updateDb(const ::Ice::AsyncResultPtr&);
    
private:

    void updateDb(const ::RoboCompRCMaster::compDB&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_updateDb(const ::RoboCompRCMaster::compDB&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void getComps(const ::RoboCompRCMaster::compData& filter, ::RoboCompRCMaster::compDB& comps)
    {
        getComps(filter, comps, 0);
    }
    void getComps(const ::RoboCompRCMaster::compData& filter, ::RoboCompRCMaster::compDB& comps, const ::Ice::Context& __ctx)
    {
        getComps(filter, comps, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::IceInternal::Function<void (const ::RoboCompRCMaster::compDB&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getComps(filter, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getComps(filter, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRCMaster::compDB&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getComps(filter, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getComps(filter, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRCMaster::compDB&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompRCMaster::compDB&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
                ::RoboCompRCMaster::compDB comps;
                try
                {
                    __proxy->end_getComps(comps, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(comps);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompRCMaster::compDB&)> _response;
        };
        return begin_getComps(filter, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getComps(const ::RoboCompRCMaster::compData& filter)
    {
        return begin_getComps(filter, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::Ice::Context& __ctx)
    {
        return begin_getComps(filter, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComps(filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComps(filter, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::RoboCompRCMaster::Callback_rcmaster_getCompsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComps(filter, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::Ice::Context& __ctx, const ::RoboCompRCMaster::Callback_rcmaster_getCompsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComps(filter, &__ctx, __del, __cookie);
    }

    void end_getComps(::RoboCompRCMaster::compDB& comps, const ::Ice::AsyncResultPtr&);
    
private:

    void getComps(const ::RoboCompRCMaster::compData&, ::RoboCompRCMaster::compDB&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getComps(const ::RoboCompRCMaster::compData&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getComPort(const ::std::string& compName, const ::std::string& privateIP)
    {
        return getComPort(compName, privateIP, 0);
    }
    ::Ice::Int getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx)
    {
        return getComPort(compName, privateIP, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getComPort(compName, privateIP, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getComPort(compName, privateIP, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getComPort(compName, privateIP, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getComPort(compName, privateIP, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getComPort(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getComPort(compName, privateIP, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getComPort(const ::std::string& compName, const ::std::string& privateIP)
    {
        return begin_getComPort(compName, privateIP, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx)
    {
        return begin_getComPort(compName, privateIP, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComPort(compName, privateIP, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComPort(compName, privateIP, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::RoboCompRCMaster::Callback_rcmaster_getComPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComPort(compName, privateIP, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx, const ::RoboCompRCMaster::Callback_rcmaster_getComPortPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComPort(compName, privateIP, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_getComPort(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getComPort(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getComPort(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::RoboCompRCMaster::interfaceList getComp(const ::std::string& compName, const ::std::string& privateIP)
    {
        return getComp(compName, privateIP, 0);
    }
    ::RoboCompRCMaster::interfaceList getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx)
    {
        return getComp(compName, privateIP, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::IceInternal::Function<void (const ::RoboCompRCMaster::interfaceList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getComp(compName, privateIP, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getComp(compName, privateIP, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::RoboCompRCMaster::interfaceList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getComp(compName, privateIP, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getComp(compName, privateIP, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompRCMaster::interfaceList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::RoboCompRCMaster::interfaceList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
                ::RoboCompRCMaster::interfaceList __ret;
                try
                {
                    __ret = __proxy->end_getComp(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::RoboCompRCMaster::interfaceList&)> _response;
        };
        return begin_getComp(compName, privateIP, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getComp(const ::std::string& compName, const ::std::string& privateIP)
    {
        return begin_getComp(compName, privateIP, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx)
    {
        return begin_getComp(compName, privateIP, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComp(compName, privateIP, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComp(compName, privateIP, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::RoboCompRCMaster::Callback_rcmaster_getCompPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComp(compName, privateIP, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context& __ctx, const ::RoboCompRCMaster::Callback_rcmaster_getCompPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getComp(compName, privateIP, &__ctx, __del, __cookie);
    }

    ::RoboCompRCMaster::interfaceList end_getComp(const ::Ice::AsyncResultPtr&);
    
private:

    ::RoboCompRCMaster::interfaceList getComp(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getComp(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void flush(bool maindb)
    {
        flush(maindb, 0);
    }
    void flush(bool maindb, const ::Ice::Context& __ctx)
    {
        flush(maindb, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_flush(bool maindb, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_flush(maindb, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_flush(bool maindb, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_flush(maindb, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_flush(bool maindb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_flush(maindb, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_flush(bool maindb, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_flush(maindb, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_flush(bool maindb)
    {
        return begin_flush(maindb, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_flush(bool maindb, const ::Ice::Context& __ctx)
    {
        return begin_flush(maindb, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_flush(bool maindb, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flush(maindb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_flush(bool maindb, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flush(maindb, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_flush(bool maindb, const ::RoboCompRCMaster::Callback_rcmaster_flushPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flush(maindb, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_flush(bool maindb, const ::Ice::Context& __ctx, const ::RoboCompRCMaster::Callback_rcmaster_flushPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_flush(maindb, &__ctx, __del, __cookie);
    }

    void end_flush(const ::Ice::AsyncResultPtr&);
    
private:

    void flush(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_flush(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getStat(bool showNames)
    {
        return getStat(showNames, 0);
    }
    ::std::string getStat(bool showNames, const ::Ice::Context& __ctx)
    {
        return getStat(showNames, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getStat(bool showNames, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStat(showNames, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStat(bool showNames, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStat(showNames, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getStat(bool showNames, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getStat(showNames, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getStat(bool showNames, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getStat(showNames, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getStat(bool showNames, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getStat(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getStat(showNames, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getStat(bool showNames)
    {
        return begin_getStat(showNames, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStat(bool showNames, const ::Ice::Context& __ctx)
    {
        return begin_getStat(showNames, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getStat(bool showNames, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStat(showNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStat(bool showNames, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStat(showNames, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStat(bool showNames, const ::RoboCompRCMaster::Callback_rcmaster_getStatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStat(showNames, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getStat(bool showNames, const ::Ice::Context& __ctx, const ::RoboCompRCMaster::Callback_rcmaster_getStatPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getStat(showNames, &__ctx, __del, __cookie);
    }

    ::std::string end_getStat(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getStat(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getStat(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<rcmaster> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_secure(bool __secure) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_twoway() const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_oneway() const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_batchOneway() const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_datagram() const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_batchDatagram() const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_compress(bool __compress) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_timeout(int __timeout) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<rcmaster> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<rcmaster*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace RoboCompRCMaster
{

class rcmaster : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void registerComp(const ::RoboCompRCMaster::compData&, bool, bool, ::RoboCompRCMaster::interfaceList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void updateDb(const ::RoboCompRCMaster::compDB&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void getComps(const ::RoboCompRCMaster::compData&, ::RoboCompRCMaster::compDB&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getComPort(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::RoboCompRCMaster::interfaceList getComp(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void flush(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getStat(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace RoboCompRCMaster
{

class rcmaster : virtual public ::IceDelegate::RoboCompRCMaster::rcmaster,
                 virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void registerComp(const ::RoboCompRCMaster::compData&, bool, bool, ::RoboCompRCMaster::interfaceList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateDb(const ::RoboCompRCMaster::compDB&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getComps(const ::RoboCompRCMaster::compData&, ::RoboCompRCMaster::compDB&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getComPort(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompRCMaster::interfaceList getComp(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void flush(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getStat(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace RoboCompRCMaster
{

class rcmaster : virtual public ::IceDelegate::RoboCompRCMaster::rcmaster,
                 virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void registerComp(const ::RoboCompRCMaster::compData&, bool, bool, ::RoboCompRCMaster::interfaceList&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void updateDb(const ::RoboCompRCMaster::compDB&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void getComps(const ::RoboCompRCMaster::compData&, ::RoboCompRCMaster::compDB&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getComPort(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::RoboCompRCMaster::interfaceList getComp(const ::std::string&, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void flush(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getStat(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace RoboCompRCMaster
{

class rcmaster : virtual public ::Ice::Object
{
public:

    typedef rcmasterPrx ProxyType;
    typedef rcmasterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void registerComp(const ::RoboCompRCMaster::compData&, bool, bool, ::RoboCompRCMaster::interfaceList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerComp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void updateDb(const ::RoboCompRCMaster::compDB&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___updateDb(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getComps(const ::RoboCompRCMaster::compData&, ::RoboCompRCMaster::compDB&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getComps(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getComPort(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getComPort(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompRCMaster::interfaceList getComp(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getComp(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void flush(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___flush(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getStat(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getStat(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const rcmaster& l, const rcmaster& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const rcmaster& l, const rcmaster& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace RoboCompRCMaster
{

template<class T>
class CallbackNC_rcmaster_registerComp : public Callback_rcmaster_registerComp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRCMaster::interfaceList&);

    CallbackNC_rcmaster_registerComp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRCMaster::interfaceList idata;
        try
        {
            __proxy->end_registerComp(idata, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(idata);
        }
    }

    Response response;
};

template<class T> Callback_rcmaster_registerCompPtr
newCallback_rcmaster_registerComp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRCMaster::interfaceList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_registerComp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_rcmaster_registerCompPtr
newCallback_rcmaster_registerComp(T* instance, void (T::*cb)(const ::RoboCompRCMaster::interfaceList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_registerComp<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_rcmaster_registerComp : public Callback_rcmaster_registerComp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRCMaster::interfaceList&, const CT&);

    Callback_rcmaster_registerComp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRCMaster::interfaceList idata;
        try
        {
            __proxy->end_registerComp(idata, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(idata, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_rcmaster_registerCompPtr
newCallback_rcmaster_registerComp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRCMaster::interfaceList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_registerComp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_registerCompPtr
newCallback_rcmaster_registerComp(T* instance, void (T::*cb)(const ::RoboCompRCMaster::interfaceList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_registerComp<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_rcmaster_updateDb : public Callback_rcmaster_updateDb_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_rcmaster_updateDb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateDb(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_rcmaster_updateDbPtr
newCallback_rcmaster_updateDb(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_updateDb<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_rcmaster_updateDbPtr
newCallback_rcmaster_updateDb(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_updateDb<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_rcmaster_updateDbPtr
newCallback_rcmaster_updateDb(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_updateDb<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_rcmaster_updateDbPtr
newCallback_rcmaster_updateDb(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_updateDb<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_rcmaster_updateDb : public Callback_rcmaster_updateDb_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_rcmaster_updateDb(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_updateDb(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_rcmaster_updateDbPtr
newCallback_rcmaster_updateDb(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_updateDb<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_updateDbPtr
newCallback_rcmaster_updateDb(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_updateDb<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_updateDbPtr
newCallback_rcmaster_updateDb(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_updateDb<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_updateDbPtr
newCallback_rcmaster_updateDb(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_updateDb<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_rcmaster_getComps : public Callback_rcmaster_getComps_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRCMaster::compDB&);

    CallbackNC_rcmaster_getComps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRCMaster::compDB comps;
        try
        {
            __proxy->end_getComps(comps, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(comps);
        }
    }

    Response response;
};

template<class T> Callback_rcmaster_getCompsPtr
newCallback_rcmaster_getComps(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRCMaster::compDB&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_getComps<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_rcmaster_getCompsPtr
newCallback_rcmaster_getComps(T* instance, void (T::*cb)(const ::RoboCompRCMaster::compDB&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_getComps<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_rcmaster_getComps : public Callback_rcmaster_getComps_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRCMaster::compDB&, const CT&);

    Callback_rcmaster_getComps(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRCMaster::compDB comps;
        try
        {
            __proxy->end_getComps(comps, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(comps, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_rcmaster_getCompsPtr
newCallback_rcmaster_getComps(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRCMaster::compDB&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_getComps<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_getCompsPtr
newCallback_rcmaster_getComps(T* instance, void (T::*cb)(const ::RoboCompRCMaster::compDB&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_getComps<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_rcmaster_getComPort : public Callback_rcmaster_getComPort_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_rcmaster_getComPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getComPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_rcmaster_getComPortPtr
newCallback_rcmaster_getComPort(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_getComPort<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_rcmaster_getComPortPtr
newCallback_rcmaster_getComPort(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_getComPort<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_rcmaster_getComPort : public Callback_rcmaster_getComPort_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_rcmaster_getComPort(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getComPort(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_rcmaster_getComPortPtr
newCallback_rcmaster_getComPort(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_getComPort<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_getComPortPtr
newCallback_rcmaster_getComPort(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_getComPort<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_rcmaster_getComp : public Callback_rcmaster_getComp_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRCMaster::interfaceList&);

    CallbackNC_rcmaster_getComp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRCMaster::interfaceList __ret;
        try
        {
            __ret = __proxy->end_getComp(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_rcmaster_getCompPtr
newCallback_rcmaster_getComp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRCMaster::interfaceList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_getComp<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_rcmaster_getCompPtr
newCallback_rcmaster_getComp(T* instance, void (T::*cb)(const ::RoboCompRCMaster::interfaceList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_getComp<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_rcmaster_getComp : public Callback_rcmaster_getComp_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRCMaster::interfaceList&, const CT&);

    Callback_rcmaster_getComp(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::RoboCompRCMaster::interfaceList __ret;
        try
        {
            __ret = __proxy->end_getComp(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_rcmaster_getCompPtr
newCallback_rcmaster_getComp(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRCMaster::interfaceList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_getComp<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_getCompPtr
newCallback_rcmaster_getComp(T* instance, void (T::*cb)(const ::RoboCompRCMaster::interfaceList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_getComp<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_rcmaster_flush : public Callback_rcmaster_flush_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_rcmaster_flush(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_rcmaster_flushPtr
newCallback_rcmaster_flush(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_flush<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_rcmaster_flushPtr
newCallback_rcmaster_flush(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_flush<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_rcmaster_flushPtr
newCallback_rcmaster_flush(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_flush<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_rcmaster_flushPtr
newCallback_rcmaster_flush(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_flush<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_rcmaster_flush : public Callback_rcmaster_flush_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_rcmaster_flush(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_rcmaster_flushPtr
newCallback_rcmaster_flush(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_flush<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_flushPtr
newCallback_rcmaster_flush(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_flush<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_flushPtr
newCallback_rcmaster_flush(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_flush<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_flushPtr
newCallback_rcmaster_flush(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_flush<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_rcmaster_getStat : public Callback_rcmaster_getStat_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_rcmaster_getStat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getStat(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_rcmaster_getStatPtr
newCallback_rcmaster_getStat(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_getStat<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_rcmaster_getStatPtr
newCallback_rcmaster_getStat(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_rcmaster_getStat<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_rcmaster_getStat : public Callback_rcmaster_getStat_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_rcmaster_getStat(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::RoboCompRCMaster::rcmasterPrx __proxy = ::RoboCompRCMaster::rcmasterPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getStat(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_rcmaster_getStatPtr
newCallback_rcmaster_getStat(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_getStat<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_rcmaster_getStatPtr
newCallback_rcmaster_getStat(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_rcmaster_getStat<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
