// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `RCMaster.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <RCMaster.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompRCMaster__rcmaster__registerComp_name = "registerComp";

const ::std::string __RoboCompRCMaster__rcmaster__updateDb_name = "updateDb";

const ::std::string __RoboCompRCMaster__rcmaster__getComps_name = "getComps";

const ::std::string __RoboCompRCMaster__rcmaster__getComPort_name = "getComPort";

const ::std::string __RoboCompRCMaster__rcmaster__getComp_name = "getComp";

const ::std::string __RoboCompRCMaster__rcmaster__flush_name = "flush";

const ::std::string __RoboCompRCMaster__rcmaster__getStat_name = "getStat";

}

namespace
{

const char* __RoboCompRCMaster__InvalidComponent_name = "RoboCompRCMaster::InvalidComponent";

struct __F__RoboCompRCMaster__InvalidComponent : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompRCMaster::InvalidComponent();
    }
};

class __F__RoboCompRCMaster__InvalidComponent__Init
{
public:

    __F__RoboCompRCMaster__InvalidComponent__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompRCMaster::InvalidComponent", new __F__RoboCompRCMaster__InvalidComponent);
    }

    ~__F__RoboCompRCMaster__InvalidComponent__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompRCMaster::InvalidComponent");
    }
};

const __F__RoboCompRCMaster__InvalidComponent__Init __F__RoboCompRCMaster__InvalidComponent__i;

}

RoboCompRCMaster::InvalidComponent::InvalidComponent(const ::RoboCompRCMaster::compData& __ice_component, const ::std::string& __ice_message) :
    ::Ice::UserException(),
    component(__ice_component),
    message(__ice_message)
{
}

RoboCompRCMaster::InvalidComponent::~InvalidComponent() throw()
{
}

::std::string
RoboCompRCMaster::InvalidComponent::ice_name() const
{
    return __RoboCompRCMaster__InvalidComponent_name;
}

RoboCompRCMaster::InvalidComponent*
RoboCompRCMaster::InvalidComponent::ice_clone() const
{
    return new InvalidComponent(*this);
}

void
RoboCompRCMaster::InvalidComponent::ice_throw() const
{
    throw *this;
}

void
RoboCompRCMaster::InvalidComponent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompRCMaster::InvalidComponent", -1, true);
    __os->write(component);
    __os->write(message);
    __os->endWriteSlice();
}

void
RoboCompRCMaster::InvalidComponent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(component);
    __is->read(message);
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompRCMaster__DuplicateComponent_name = "RoboCompRCMaster::DuplicateComponent";

struct __F__RoboCompRCMaster__DuplicateComponent : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompRCMaster::DuplicateComponent();
    }
};

class __F__RoboCompRCMaster__DuplicateComponent__Init
{
public:

    __F__RoboCompRCMaster__DuplicateComponent__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompRCMaster::DuplicateComponent", new __F__RoboCompRCMaster__DuplicateComponent);
    }

    ~__F__RoboCompRCMaster__DuplicateComponent__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompRCMaster::DuplicateComponent");
    }
};

const __F__RoboCompRCMaster__DuplicateComponent__Init __F__RoboCompRCMaster__DuplicateComponent__i;

}

RoboCompRCMaster::DuplicateComponent::DuplicateComponent(const ::RoboCompRCMaster::compData& __ice_component) :
    ::Ice::UserException(),
    component(__ice_component)
{
}

RoboCompRCMaster::DuplicateComponent::~DuplicateComponent() throw()
{
}

::std::string
RoboCompRCMaster::DuplicateComponent::ice_name() const
{
    return __RoboCompRCMaster__DuplicateComponent_name;
}

RoboCompRCMaster::DuplicateComponent*
RoboCompRCMaster::DuplicateComponent::ice_clone() const
{
    return new DuplicateComponent(*this);
}

void
RoboCompRCMaster::DuplicateComponent::ice_throw() const
{
    throw *this;
}

void
RoboCompRCMaster::DuplicateComponent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompRCMaster::DuplicateComponent", -1, true);
    __os->write(component);
    __os->endWriteSlice();
}

void
RoboCompRCMaster::DuplicateComponent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(component);
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompRCMaster__ComponentNotFound_name = "RoboCompRCMaster::ComponentNotFound";

struct __F__RoboCompRCMaster__ComponentNotFound : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompRCMaster::ComponentNotFound();
    }
};

class __F__RoboCompRCMaster__ComponentNotFound__Init
{
public:

    __F__RoboCompRCMaster__ComponentNotFound__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompRCMaster::ComponentNotFound", new __F__RoboCompRCMaster__ComponentNotFound);
    }

    ~__F__RoboCompRCMaster__ComponentNotFound__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompRCMaster::ComponentNotFound");
    }
};

const __F__RoboCompRCMaster__ComponentNotFound__Init __F__RoboCompRCMaster__ComponentNotFound__i;

}

RoboCompRCMaster::ComponentNotFound::ComponentNotFound(const ::RoboCompRCMaster::compData& __ice_component) :
    ::Ice::UserException(),
    component(__ice_component)
{
}

RoboCompRCMaster::ComponentNotFound::~ComponentNotFound() throw()
{
}

::std::string
RoboCompRCMaster::ComponentNotFound::ice_name() const
{
    return __RoboCompRCMaster__ComponentNotFound_name;
}

RoboCompRCMaster::ComponentNotFound*
RoboCompRCMaster::ComponentNotFound::ice_clone() const
{
    return new ComponentNotFound(*this);
}

void
RoboCompRCMaster::ComponentNotFound::ice_throw() const
{
    throw *this;
}

void
RoboCompRCMaster::ComponentNotFound::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompRCMaster::ComponentNotFound", -1, true);
    __os->write(component);
    __os->endWriteSlice();
}

void
RoboCompRCMaster::ComponentNotFound::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(component);
    __is->endReadSlice();
}

namespace
{

const char* __RoboCompRCMaster__PortAssignError_name = "RoboCompRCMaster::PortAssignError";

struct __F__RoboCompRCMaster__PortAssignError : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::RoboCompRCMaster::PortAssignError();
    }
};

class __F__RoboCompRCMaster__PortAssignError__Init
{
public:

    __F__RoboCompRCMaster__PortAssignError__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::RoboCompRCMaster::PortAssignError", new __F__RoboCompRCMaster__PortAssignError);
    }

    ~__F__RoboCompRCMaster__PortAssignError__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::RoboCompRCMaster::PortAssignError");
    }
};

const __F__RoboCompRCMaster__PortAssignError__Init __F__RoboCompRCMaster__PortAssignError__i;

}

RoboCompRCMaster::PortAssignError::PortAssignError(::Ice::Int __ice_port, const ::std::string& __ice_errorMessage) :
    ::Ice::UserException(),
    port(__ice_port),
    errorMessage(__ice_errorMessage)
{
}

RoboCompRCMaster::PortAssignError::~PortAssignError() throw()
{
}

::std::string
RoboCompRCMaster::PortAssignError::ice_name() const
{
    return __RoboCompRCMaster__PortAssignError_name;
}

RoboCompRCMaster::PortAssignError*
RoboCompRCMaster::PortAssignError::ice_clone() const
{
    return new PortAssignError(*this);
}

void
RoboCompRCMaster::PortAssignError::ice_throw() const
{
    throw *this;
}

void
RoboCompRCMaster::PortAssignError::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::RoboCompRCMaster::PortAssignError", -1, true);
    __os->write(port);
    __os->write(errorMessage);
    __os->endWriteSlice();
}

void
RoboCompRCMaster::PortAssignError::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(port);
    __is->read(errorMessage);
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompRCMaster::upCast(::IceProxy::RoboCompRCMaster::rcmaster* p) { return p; }

void
::IceProxy::RoboCompRCMaster::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRCMaster::rcmaster>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompRCMaster::rcmaster;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompRCMaster::rcmaster::registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, ::RoboCompRCMaster::interfaceList& idata, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRCMaster__rcmaster__registerComp_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRCMaster__rcmaster__registerComp_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRCMaster::rcmaster* __del = dynamic_cast< ::IceDelegate::RoboCompRCMaster::rcmaster*>(__delBase.get());
            __del->registerComp(compInfo, monitor, assignPort, idata, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRCMaster::rcmaster::begin_registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRCMaster__rcmaster__registerComp_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRCMaster__rcmaster__registerComp_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRCMaster__rcmaster__registerComp_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(compInfo);
        __os->write(monitor);
        __os->write(assignPort);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRCMaster::rcmaster::end_registerComp(::RoboCompRCMaster::interfaceList& idata, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRCMaster__rcmaster__registerComp_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRCMaster::DuplicateComponent&)
            {
                throw;
            }
            catch(const ::RoboCompRCMaster::InvalidComponent&)
            {
                throw;
            }
            catch(const ::RoboCompRCMaster::PortAssignError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(idata);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRCMaster::rcmaster::updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRCMaster__rcmaster__updateDb_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRCMaster__rcmaster__updateDb_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRCMaster::rcmaster* __del = dynamic_cast< ::IceDelegate::RoboCompRCMaster::rcmaster*>(__delBase.get());
            __del->updateDb(components, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRCMaster::rcmaster::begin_updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRCMaster__rcmaster__updateDb_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRCMaster__rcmaster__updateDb_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRCMaster__rcmaster__updateDb_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(components);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRCMaster::rcmaster::end_updateDb(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRCMaster__rcmaster__updateDb_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRCMaster::DuplicateComponent&)
            {
                throw;
            }
            catch(const ::RoboCompRCMaster::InvalidComponent&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRCMaster::rcmaster::getComps(const ::RoboCompRCMaster::compData& filter, ::RoboCompRCMaster::compDB& comps, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRCMaster__rcmaster__getComps_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRCMaster__rcmaster__getComps_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRCMaster::rcmaster* __del = dynamic_cast< ::IceDelegate::RoboCompRCMaster::rcmaster*>(__delBase.get());
            __del->getComps(filter, comps, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRCMaster::rcmaster::begin_getComps(const ::RoboCompRCMaster::compData& filter, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRCMaster__rcmaster__getComps_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRCMaster__rcmaster__getComps_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRCMaster__rcmaster__getComps_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(filter);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRCMaster::rcmaster::end_getComps(::RoboCompRCMaster::compDB& comps, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRCMaster__rcmaster__getComps_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRCMaster::ComponentNotFound&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(comps);
        __result->__endReadParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::RoboCompRCMaster::rcmaster::getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRCMaster__rcmaster__getComPort_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRCMaster__rcmaster__getComPort_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRCMaster::rcmaster* __del = dynamic_cast< ::IceDelegate::RoboCompRCMaster::rcmaster*>(__delBase.get());
            return __del->getComPort(compName, privateIP, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRCMaster::rcmaster::begin_getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRCMaster__rcmaster__getComPort_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRCMaster__rcmaster__getComPort_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRCMaster__rcmaster__getComPort_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(compName);
        __os->write(privateIP);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::RoboCompRCMaster::rcmaster::end_getComPort(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRCMaster__rcmaster__getComPort_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRCMaster::ComponentNotFound&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::RoboCompRCMaster::interfaceList
IceProxy::RoboCompRCMaster::rcmaster::getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRCMaster__rcmaster__getComp_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRCMaster__rcmaster__getComp_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRCMaster::rcmaster* __del = dynamic_cast< ::IceDelegate::RoboCompRCMaster::rcmaster*>(__delBase.get());
            return __del->getComp(compName, privateIP, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRCMaster::rcmaster::begin_getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRCMaster__rcmaster__getComp_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRCMaster__rcmaster__getComp_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRCMaster__rcmaster__getComp_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(compName);
        __os->write(privateIP);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::RoboCompRCMaster::interfaceList
IceProxy::RoboCompRCMaster::rcmaster::end_getComp(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRCMaster__rcmaster__getComp_name);
    ::RoboCompRCMaster::interfaceList __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::RoboCompRCMaster::ComponentNotFound&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::RoboCompRCMaster::rcmaster::flush(bool maindb, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRCMaster__rcmaster__flush_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRCMaster::rcmaster* __del = dynamic_cast< ::IceDelegate::RoboCompRCMaster::rcmaster*>(__delBase.get());
            __del->flush(maindb, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRCMaster::rcmaster::begin_flush(bool maindb, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRCMaster__rcmaster__flush_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRCMaster__rcmaster__flush_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(maindb);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompRCMaster::rcmaster::end_flush(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompRCMaster__rcmaster__flush_name);
}

::std::string
IceProxy::RoboCompRCMaster::rcmaster::getStat(bool showNames, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __RoboCompRCMaster__rcmaster__getStat_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__RoboCompRCMaster__rcmaster__getStat_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::RoboCompRCMaster::rcmaster* __del = dynamic_cast< ::IceDelegate::RoboCompRCMaster::rcmaster*>(__delBase.get());
            return __del->getStat(showNames, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompRCMaster::rcmaster::begin_getStat(bool showNames, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompRCMaster__rcmaster__getStat_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompRCMaster__rcmaster__getStat_name, __del, __cookie);
    try
    {
        __result->__prepare(__RoboCompRCMaster__rcmaster__getStat_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(showNames);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::RoboCompRCMaster::rcmaster::end_getStat(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompRCMaster__rcmaster__getStat_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::RoboCompRCMaster::rcmaster::ice_staticId()
{
    return ::RoboCompRCMaster::rcmaster::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::RoboCompRCMaster::rcmaster::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::RoboCompRCMaster::rcmaster);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::RoboCompRCMaster::rcmaster::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::RoboCompRCMaster::rcmaster);
}

::IceProxy::Ice::Object*
IceProxy::RoboCompRCMaster::rcmaster::__newInstance() const
{
    return new rcmaster;
}

void
IceDelegateM::RoboCompRCMaster::rcmaster::registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, ::RoboCompRCMaster::interfaceList& idata, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRCMaster__rcmaster__registerComp_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(compInfo);
        __os->write(monitor);
        __os->write(assignPort);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRCMaster::DuplicateComponent&)
            {
                throw;
            }
            catch(const ::RoboCompRCMaster::InvalidComponent&)
            {
                throw;
            }
            catch(const ::RoboCompRCMaster::PortAssignError&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(idata);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRCMaster::rcmaster::updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRCMaster__rcmaster__updateDb_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(components);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRCMaster::DuplicateComponent&)
            {
                throw;
            }
            catch(const ::RoboCompRCMaster::InvalidComponent&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRCMaster::rcmaster::getComps(const ::RoboCompRCMaster::compData& filter, ::RoboCompRCMaster::compDB& comps, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRCMaster__rcmaster__getComps_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(filter);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRCMaster::ComponentNotFound&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(comps);
        __og.endReadParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::RoboCompRCMaster::rcmaster::getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRCMaster__rcmaster__getComPort_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(compName);
        __os->write(privateIP);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRCMaster::ComponentNotFound&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::RoboCompRCMaster::interfaceList
IceDelegateM::RoboCompRCMaster::rcmaster::getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRCMaster__rcmaster__getComp_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(compName);
        __os->write(privateIP);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::RoboCompRCMaster::interfaceList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::RoboCompRCMaster::ComponentNotFound&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::RoboCompRCMaster::rcmaster::flush(bool maindb, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRCMaster__rcmaster__flush_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(maindb);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::std::string
IceDelegateM::RoboCompRCMaster::rcmaster::getStat(bool showNames, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __RoboCompRCMaster__rcmaster__getStat_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(showNames);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::RoboCompRCMaster::rcmaster::registerComp(const ::RoboCompRCMaster::compData& compInfo, bool monitor, bool assignPort, ::RoboCompRCMaster::interfaceList& idata, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompRCMaster::compData& __p_compInfo, bool __p_monitor, bool __p_assignPort, ::RoboCompRCMaster::interfaceList& __p_idata, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_compInfo(__p_compInfo),
            _m_monitor(__p_monitor),
            _m_assignPort(__p_assignPort),
            _m_idata(__p_idata)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRCMaster::rcmaster* servant = dynamic_cast< ::RoboCompRCMaster::rcmaster*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->registerComp(_m_compInfo, _m_monitor, _m_assignPort, _m_idata, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompRCMaster::compData& _m_compInfo;
        bool _m_monitor;
        bool _m_assignPort;
        ::RoboCompRCMaster::interfaceList& _m_idata;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRCMaster__rcmaster__registerComp_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(compInfo, monitor, assignPort, idata, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRCMaster::DuplicateComponent&)
    {
        throw;
    }
    catch(const ::RoboCompRCMaster::InvalidComponent&)
    {
        throw;
    }
    catch(const ::RoboCompRCMaster::PortAssignError&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRCMaster::rcmaster::updateDb(const ::RoboCompRCMaster::compDB& components, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompRCMaster::compDB& __p_components, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_components(__p_components)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRCMaster::rcmaster* servant = dynamic_cast< ::RoboCompRCMaster::rcmaster*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->updateDb(_m_components, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompRCMaster::compDB& _m_components;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRCMaster__rcmaster__updateDb_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(components, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRCMaster::DuplicateComponent&)
    {
        throw;
    }
    catch(const ::RoboCompRCMaster::InvalidComponent&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::RoboCompRCMaster::rcmaster::getComps(const ::RoboCompRCMaster::compData& filter, ::RoboCompRCMaster::compDB& comps, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::RoboCompRCMaster::compData& __p_filter, ::RoboCompRCMaster::compDB& __p_comps, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_filter(__p_filter),
            _m_comps(__p_comps)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRCMaster::rcmaster* servant = dynamic_cast< ::RoboCompRCMaster::rcmaster*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->getComps(_m_filter, _m_comps, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::RoboCompRCMaster::compData& _m_filter;
        ::RoboCompRCMaster::compDB& _m_comps;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRCMaster__rcmaster__getComps_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(filter, comps, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRCMaster::ComponentNotFound&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Int
IceDelegateD::RoboCompRCMaster::rcmaster::getComPort(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& __p_compName, const ::std::string& __p_privateIP, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_compName(__p_compName),
            _m_privateIP(__p_privateIP)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRCMaster::rcmaster* servant = dynamic_cast< ::RoboCompRCMaster::rcmaster*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getComPort(_m_compName, _m_privateIP, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_compName;
        const ::std::string& _m_privateIP;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRCMaster__rcmaster__getComPort_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, compName, privateIP, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRCMaster::ComponentNotFound&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::RoboCompRCMaster::interfaceList
IceDelegateD::RoboCompRCMaster::rcmaster::getComp(const ::std::string& compName, const ::std::string& privateIP, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::RoboCompRCMaster::interfaceList& __result, const ::std::string& __p_compName, const ::std::string& __p_privateIP, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_compName(__p_compName),
            _m_privateIP(__p_privateIP)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRCMaster::rcmaster* servant = dynamic_cast< ::RoboCompRCMaster::rcmaster*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getComp(_m_compName, _m_privateIP, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::RoboCompRCMaster::interfaceList& _result;
        const ::std::string& _m_compName;
        const ::std::string& _m_privateIP;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRCMaster__rcmaster__getComp_name, ::Ice::Idempotent, __context);
    ::RoboCompRCMaster::interfaceList __result;
    try
    {
        _DirectI __direct(__result, compName, privateIP, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::RoboCompRCMaster::ComponentNotFound&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::RoboCompRCMaster::rcmaster::flush(bool maindb, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool __p_maindb, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_maindb(__p_maindb)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRCMaster::rcmaster* servant = dynamic_cast< ::RoboCompRCMaster::rcmaster*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->flush(_m_maindb, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        bool _m_maindb;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRCMaster__rcmaster__flush_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(maindb, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::std::string
IceDelegateD::RoboCompRCMaster::rcmaster::getStat(bool showNames, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, bool __p_showNames, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_showNames(__p_showNames)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::RoboCompRCMaster::rcmaster* servant = dynamic_cast< ::RoboCompRCMaster::rcmaster*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getStat(_m_showNames, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        bool _m_showNames;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __RoboCompRCMaster__rcmaster__getStat_name, ::Ice::Idempotent, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, showNames, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Object* RoboCompRCMaster::upCast(::RoboCompRCMaster::rcmaster* p) { return p; }

namespace
{
const ::std::string __RoboCompRCMaster__rcmaster_ids[2] =
{
    "::Ice::Object",
    "::RoboCompRCMaster::rcmaster"
};

}

bool
RoboCompRCMaster::rcmaster::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompRCMaster__rcmaster_ids, __RoboCompRCMaster__rcmaster_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompRCMaster::rcmaster::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompRCMaster__rcmaster_ids[0], &__RoboCompRCMaster__rcmaster_ids[2]);
}

const ::std::string&
RoboCompRCMaster::rcmaster::ice_id(const ::Ice::Current&) const
{
    return __RoboCompRCMaster__rcmaster_ids[1];
}

const ::std::string&
RoboCompRCMaster::rcmaster::ice_staticId()
{
    return __RoboCompRCMaster__rcmaster_ids[1];
}

::Ice::DispatchStatus
RoboCompRCMaster::rcmaster::___registerComp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRCMaster::compData compInfo;
    bool monitor;
    bool assignPort;
    __is->read(compInfo);
    __is->read(monitor);
    __is->read(assignPort);
    __inS.endReadParams();
    ::RoboCompRCMaster::interfaceList idata;
    try
    {
        registerComp(compInfo, monitor, assignPort, idata, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(idata);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRCMaster::DuplicateComponent& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompRCMaster::InvalidComponent& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompRCMaster::PortAssignError& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRCMaster::rcmaster::___updateDb(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRCMaster::compDB components;
    __is->read(components);
    __inS.endReadParams();
    try
    {
        updateDb(components, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRCMaster::DuplicateComponent& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::RoboCompRCMaster::InvalidComponent& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRCMaster::rcmaster::___getComps(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompRCMaster::compData filter;
    __is->read(filter);
    __inS.endReadParams();
    ::RoboCompRCMaster::compDB comps;
    try
    {
        getComps(filter, comps, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(comps);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRCMaster::ComponentNotFound& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRCMaster::rcmaster::___getComPort(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string compName;
    ::std::string privateIP;
    __is->read(compName);
    __is->read(privateIP);
    __inS.endReadParams();
    try
    {
        ::Ice::Int __ret = getComPort(compName, privateIP, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRCMaster::ComponentNotFound& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRCMaster::rcmaster::___getComp(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string compName;
    ::std::string privateIP;
    __is->read(compName);
    __is->read(privateIP);
    __inS.endReadParams();
    try
    {
        ::RoboCompRCMaster::interfaceList __ret = getComp(compName, privateIP, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::RoboCompRCMaster::ComponentNotFound& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
RoboCompRCMaster::rcmaster::___flush(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool maindb;
    __is->read(maindb);
    __inS.endReadParams();
    flush(maindb, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompRCMaster::rcmaster::___getStat(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    bool showNames;
    __is->read(showNames);
    __inS.endReadParams();
    ::std::string __ret = getStat(showNames, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompRCMaster__rcmaster_all[] =
{
    "flush",
    "getComPort",
    "getComp",
    "getComps",
    "getStat",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "registerComp",
    "updateDb"
};

}

::Ice::DispatchStatus
RoboCompRCMaster::rcmaster::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompRCMaster__rcmaster_all, __RoboCompRCMaster__rcmaster_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompRCMaster__rcmaster_all)
    {
        case 0:
        {
            return ___flush(in, current);
        }
        case 1:
        {
            return ___getComPort(in, current);
        }
        case 2:
        {
            return ___getComp(in, current);
        }
        case 3:
        {
            return ___getComps(in, current);
        }
        case 4:
        {
            return ___getStat(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
        case 9:
        {
            return ___registerComp(in, current);
        }
        case 10:
        {
            return ___updateDb(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompRCMaster::rcmaster::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompRCMaster::rcmaster::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompRCMaster::__patch(rcmasterPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompRCMaster::rcmasterPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompRCMaster::rcmaster::ice_staticId(), v);
    }
}
