//******************************************************************
// 
//  Generated by RoboCompDSL
//  
[[[cog

import sys
import os
sys.path.append('/opt/robocomp/python')

import cog
def A():
	cog.out('<@@<')
def Z():
	cog.out('>@@>')
def TAB():
	cog.out('<TABHERE>')
def SPACE(i=0):
	s = ''
	if i>0:
		s = str(i)
	cog.out('<S'+s+'>')
cog.outl("//  File name: "+theIDSL.split('.')[0]+".ice")
cog.outl("//  Source: "+theIDSL)
]]]
[[[end]]]
//  
//****************************************************************** 
[[[cog
from dsl_parsers.dsl_factory import DSLFactory
idsl = DSLFactory().from_file(theIDSL)
from pprint import pprint
cog.outl("#ifndef " + idsl['name'].upper() + "_ICE")
cog.outl("#define " + idsl['name'].upper() + "_ICE")
if 'imports' in idsl and idsl["imports"] != '':
    for imp in idsl['imports'].split('#'):
        if imp != '':
            cog.outl("#include <" + os.path.basename(imp).split('.')[0] + ".ice>")
cog.outl("module " + idsl['name'] + "\n{")
if 'types' in idsl:
    for next_type in idsl["types"]:
        if "exception" == next_type["type"]:
            cog.outl("<TABHERE>exception " + next_type['name'] + "{" + next_type['content'] + "};")
        if "struct" == next_type["type"]:
            struct= next_type
            cog.outl("<TABHERE>struct " + struct['name'] + "\n<TABHERE>{")
            for var in struct['structIdentifiers']:
                cog.out("<TABHERE><TABHERE> " + var['type'] + " " + var['identifier'])
                try:
                    cog.outl(" =" + var['defaultValue'] + ";")
                except:
                    cog.outl(";")
            cog.outl("<TABHERE>};")
        if "sequence" == next_type["type"]:
            cog.outl("<TABHERE>sequence <" + next_type['typeSequence'] + "> " + next_type['name'] + ";")
        if "dictionary" == next_type['type']:
            cog.outl("<TABHERE>dictionary <" + next_type['content'] + "> " + next_type['name'] + ";")
        if "enum" == next_type['type']:
            cog.outl("<TABHERE>enum " + next_type['name'] + " { " + next_type['content'] + " };")
if "interfaces" in idsl:
    for interface in idsl['interfaces']:
        cog.outl("<TABHERE>interface " + interface['name'] + "\n<TABHERE>{")
        for method in interface['methods'].values():
            if method['decorator'] != '':
                cog.out("<TABHERE><TABHERE>" + method['decorator'] + " " + method['return'] + " ")
            else:
                cog.out("<TABHERE><TABHERE>" + method['return'] + " ")
            cog.out(method['name'] + " (")
            try:
                paramStrA = ''
                for p in method['params']:
                    # delim
                    if paramStrA == '':
                        delim = ''
                    else:
                        delim = ', '
                    # STR
                    if p['decorator'] != "none" and p['decorator'] != '':
                        paramStrA += delim + p['decorator'] + ' ' + p['type'] + ' ' + p['name']
                    else:
                        paramStrA += delim + p['type'] + ' ' + p['name']
                cog.out(paramStrA + ")")
            except:
                cog.out(")")
            try:
                if method['throws'] != "nothing":
                    cog.out(" throws ")
                    for p in method['throws']:
                        # STR
                        cog.out(p)
            except:
                pass
            cog.outl(";")
        cog.outl("<TABHERE>};")
]]]
[[[end]]]
};

#endif
