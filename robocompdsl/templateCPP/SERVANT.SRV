[[[cog

import sys
sys.path.append('/opt/robocomp/python')

import cog
def A():
	cog.out('<@@<')
def Z():
	cog.out('>@@>')
def TAB():
	cog.out('<TABHERE>')
def SPACE(i=0):
	s = ''
	if i>0:
		s = str(i)
	cog.out('<S'+s+'>')

from parseIDSL import *
idsl = IDSLParsing.fromFileIDSL(theIDSL)
for imp in idsl['module']['contents']:
	if imp['type'] == 'interface':
		for method in imp['methods']:
			if methodName == method['name'] and 'params' in method:
				if len(method['params']) == 2:
					for param in method['params']:
						if len(param) == 2:
							for im in idsl['module']['contents']:
								if im['type'] in ('sequence') and im['name'] == param[0]:
									if im['typeSequence'] in ('float','int','uint'):
										param[0] = im['typeSequence'] +"32[]"
									else:
										param[0] = im['typeSequence'] +"[]"
							if param[0] in ('float','int','uint'):
								param[0] = param[0] + "32"
							str = param[0] + " " + param[1]
							cog.outl(str.replace("::", "ROS/"))
						else:
							cog.outl("---")
							for im in idsl['module']['contents']:
								if im['type'] in ('sequence') and im['name'] == param[1]:
									if im['typeSequence'] in ('float','int','uint'):
										param[1] = im['typeSequence'] +"32[]"
									else:
										param[1] = im['typeSequence'] +"[]"
							if param[1] in ('float','int','uint'):
								param[1] = param[1] + "32"
							param[1] = param[1].replace("byte","int8")
							str = param[1] + " " + param[2]
							cog.outl(str.replace("::", "ROS/"))
]]]
[[[end]]]